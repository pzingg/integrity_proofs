<div class="mx-auto max-w-sm">
  <.header>
    Register a new security key
    <:subtitle>
      <.button id="safari-button" style="display:none" onclick="triggerAttestation()">
        Register
      </.button>
      <img id="auth-img" src={static_path(@conn, "/images/fingerprint-scanning.svg")} />
      <br />

      <p><em><%= @login %></em>, press your authenticator now!</p>

      <p style="text-align:right">
        <.link navigate={~p"/home"} class="font-semibold text-brand hover:underline">
          Cancel
        </.link>
      </p>
    </:subtitle>
  </.header>

  <.simple_form
    :let={f}
    for={@conn.params["user"]}
    as={:key}
    id="waf"
    action={~p"/wauth/register"}
  >
    <.input field={f[:rawID]} type="hidden" />
    <.input field={f[:type]} type="hidden" />
    <.input field={f[:clientDataJSON]} type="hidden" />
    <.input field={f[:attestationObject]} type="hidden" />

    <:actions>
      <.button phx-disable-with="Skipping..." class="w-full" style="visibility:hidden">
        Skip
      </.button>
    </:actions>
  </.simple_form>

  <p style="font-size:0.6em; color: grey">
    Image from
    <a style="color: grey" href="https://www.flaticon.com/free-icon/fingerprint-scanning_25930">
      https://www.flaticon.com/free-icon/fingerprint-scanning_25930
    </a>
  </p>
</div>

<script>
  var challenge_b64 = "<%= @challenge %>";
  var rp_id = "<%= @rp_id %>";
  var user = "<%= @user %>";
  var user_id_b64 = "<%= @user_id %>";

  function _arrayBufferToString( buffer ) {
    var binary = '';
    var bytes = new Uint8Array( buffer );
    var len = bytes.byteLength;
    for (var i = 0; i < len; i++) {
      binary += String.fromCharCode( bytes[ i ] );
    }
    return binary;
  }

  function _arrayBufferToBase64( buffer ) {
    var binary = '';
    var bytes = new Uint8Array( buffer );
    var len = bytes.byteLength;
    for (var i = 0; i < len; i++) {
      binary += String.fromCharCode( bytes[ i ] );
    }
    return window.btoa( binary );
  }

  function _base64ToArrayBuffer(base64) {
      var binary_string =  window.atob(base64);
      var len = binary_string.length;
      var bytes = new Uint8Array( len );
      for (var i = 0; i < len; i++)        {
          bytes[i] = binary_string.charCodeAt(i);
      }
      return bytes.buffer;
  }

  function triggerAttestation(){
    document.getElementById('safari-button').style.display = 'none';
    document.getElementById('auth-img').style.display = 'inline';

    challenge = _base64ToArrayBuffer(challenge_b64);
    user_id = _base64ToArrayBuffer(user_id_b64);

    navigator.credentials.create({
      publicKey: {
        // random, cryptographically secure, at least 16 bytes
        challenge: challenge,
        // relying party
        rp: {
          id: rp_id,
          name: 'Wax FTW'
        },
        user: {
          id: user_id,
          name: user,
          displayName: user
        },
        pubKeyCredParams: [
          {
            type: "public-key", alg: -7 // "ES256" IANA COSE Algorithms registry
          }
        ],
       attestation: "<%= @attestation %>",
        authenticatorSelection: {
          residentKey: 'preferred'
        }
      }
    }).then(function (newCredential) {
      // .simple_form prefixes input id with the form id
      document.getElementById('waf_rawID').value = _arrayBufferToBase64(newCredential.rawId);
      document.getElementById('waf_type').value = newCredential.type;
      document.getElementById('waf_clientDataJSON').value =
        _arrayBufferToString(newCredential.response.clientDataJSON)
      document.getElementById('waf_attestationObject').value =
        _arrayBufferToBase64(newCredential.response.attestationObject)

      document.getElementById('waf').submit();
    }).catch(function (err) {
      if(err.name == 'NotAllowedError') {
          document.getElementById('safari-button').style.display = 'inline-block';
          document.getElementById('auth-img').style.display = 'none';
        }
      else {
          console.log(err);
        }
    });
  }

  triggerAttestation();
</script>
